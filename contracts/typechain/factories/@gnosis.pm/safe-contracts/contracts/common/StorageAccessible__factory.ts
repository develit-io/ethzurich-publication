/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  StorageAccessible,
  StorageAccessibleInterface,
} from "../../../../../@gnosis.pm/safe-contracts/contracts/common/StorageAccessible";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "getStorageAt",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "targetContract",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "calldataPayload",
        type: "bytes",
      },
    ],
    name: "simulateAndRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610371908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c9081635624b25b1461003a575063b4faba091461003557600080fd5b61023f565b346101245760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012457602435600581811b926020906004359084158587048414171561011f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06100c46100bb6100b689610205565b6101bc565b97808952610205565b0136848801375b8481106100e457604051806100e08882610127565b0390f35b808201548382861b880101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461011f576001016100cb565b6102e9565b80fd5b60208082528251818301819052939260005b858110610179575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b818101830151848201604001528201610139565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff82111761020057604052565b61018d565b67ffffffffffffffff811161020057601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b346102e45760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102e45760043573ffffffffffffffffffffffffffffffffffffffff811681036102e4576024359067ffffffffffffffff82116102e457366023830112156102e45781600401356102bd6100b682610205565b9281845236602483830101116102e457816000926024602093018387013784010152610318565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000918291602082519201905af46000523d6020523d600060403e60403d016000fdfea2646970667358221220dd09cf79bdd40ae8235005b0f5bf6ead5852762b5b33bbae1af697adcbd4803464736f6c63430008130033";

type StorageAccessibleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StorageAccessibleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StorageAccessible__factory extends ContractFactory {
  constructor(...args: StorageAccessibleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StorageAccessible> {
    return super.deploy(overrides || {}) as Promise<StorageAccessible>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StorageAccessible {
    return super.attach(address) as StorageAccessible;
  }
  override connect(signer: Signer): StorageAccessible__factory {
    return super.connect(signer) as StorageAccessible__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorageAccessibleInterface {
    return new utils.Interface(_abi) as StorageAccessibleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StorageAccessible {
    return new Contract(address, _abi, signerOrProvider) as StorageAccessible;
  }
}
