/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  OwnerManager,
  OwnerManagerInterface,
} from "../../../../../@gnosis.pm/safe-contracts/contracts/base/OwnerManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "AddedOwner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "threshold",
        type: "uint256",
      },
    ],
    name: "ChangedThreshold",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "RemovedOwner",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
    ],
    name: "addOwnerWithThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
    ],
    name: "changeThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwners",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "prevOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
    ],
    name: "removeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "prevOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "swapOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610bbd908161001c8239f35b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c80630d582f131461076d5780632f54bf6e146106eb578063694e80c314610668578063a0e67e2b146104b8578063e318b52b14610320578063e75235b8146102df5763f8dc5dd91461006d57600080fd5b346102db5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102db576100a461089e565b916100ad6108c6565b92604435936100ba610b20565b600154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff918281019081116102af57866100f6911015610a0f565b73ffffffffffffffffffffffffffffffffffffffff8080921693841515806102a4575b610122906108e9565b16908188528760205261013b8482888b20541614610a74565b8388528760205285882054169087528487207fffffffffffffffffffffffff000000000000000000000000000000000000000091828254161790558287528487209081541690556001548015610278577ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf916020910192836001558551908152a183600254036101c9578480f35b6101dd906101d5610b20565b841115610a0f565b6001831061021c5750816020917f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939360025551908152a1388080808480f35b602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152fd5b6024876011867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b506001851415610119565b6024886011877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8280fd5b83823461031c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031c576020906002549051908152f35b5080fd5b83823461031c5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031c5761035961089e565b906103626108c6565b906044359073ffffffffffffffffffffffffffffffffffffffff92858484168094036104b5577f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26958580807ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9561040760209a898c986103e0610b20565b8c1515806104aa575b806104a0575b6103f8906108e9565b8c8152808a522054161561094e565b169283151580610495575b61041b906108e9565b1690818a528984526104338382888d20541614610a74565b828a52898452858a20541690868a52858a207fffffffffffffffffffffffff00000000000000000000000000000000000000009283825416179055895284892086828254161790558189528489209081541690558351908152a151908152a180f35b506001841415610412565b50308d14156103ef565b5060018d14156103e9565b80fd5b5090346102db57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102db57600192601f8454916104f983610ad9565b928551937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09384910116840184811067ffffffffffffffff82111761063c579261054b87959289958752808452610ad9565b956020918284019701368837839085855284835273ffffffffffffffffffffffffffffffffffffffff9186838988205416905b6105be575b505050855195828701938388525180945286019693905b8382106105a75786880387f35b84518116885296820196938201939085019061059a565b969896949593948316808a146106305786518210156106045790818a92878360051b8a01015285528486526105f8848a87205416916109b3565b9197999695949661057e565b6024856032857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b98969895949395610583565b6024836041887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50346102db5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102db578135916106a3610b20565b6106b1600154841115610a0f565b6001831061021c5750816020917f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939360025551908152a180f35b83823461031c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031c5760209173ffffffffffffffffffffffffffffffffffffffff8061073d61089e565b169160018314159283610757575b50505090519015158152f35b849293508152808552205416151583808061074b565b50346102db57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102db576107a461089e565b91602435926107b1610b20565b73ffffffffffffffffffffffffffffffffffffffff8091169081151580610893575b80610889575b6107e2906108e9565b818652856020526107f88185882054161561094e565b600186528560205283862054168186528386207fffffffffffffffffffffffff000000000000000000000000000000000000000091828254161790556001865281848720918254161790557f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea2660206108716001546109b3565b92836001558551908152a183600254036101c9578480f35b50308214156107d9565b5060018214156107d3565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036108c157565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff821682036108c157565b156108f057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152fd5b1561095557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109e05760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b15610a1657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152fd5b15610a7b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152fd5b67ffffffffffffffff8111610af15760051b60200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b303303610b2957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152fdfea26469706673582212201d7a5aafafc4380f2ad08ab729547baea117c48cd301426d49f9011b56c8f95a64736f6c63430008130033";

type OwnerManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OwnerManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OwnerManager__factory extends ContractFactory {
  constructor(...args: OwnerManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OwnerManager> {
    return super.deploy(overrides || {}) as Promise<OwnerManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OwnerManager {
    return super.attach(address) as OwnerManager;
  }
  override connect(signer: Signer): OwnerManager__factory {
    return super.connect(signer) as OwnerManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OwnerManagerInterface {
    return new utils.Interface(_abi) as OwnerManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OwnerManager {
    return new Contract(address, _abi, signerOrProvider) as OwnerManager;
  }
}
