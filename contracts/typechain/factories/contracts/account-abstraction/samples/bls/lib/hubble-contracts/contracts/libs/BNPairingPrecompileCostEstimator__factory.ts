/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../../../../common";
import type {
  BNPairingPrecompileCostEstimator,
  BNPairingPrecompileCostEstimatorInterface,
} from "../../../../../../../../../contracts/account-abstraction/samples/bls/lib/hubble-contracts/contracts/libs/BNPairingPrecompileCostEstimator";

const _abi = [
  {
    inputs: [],
    name: "baseCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pairCount",
        type: "uint256",
      },
    ],
    name: "getGasCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "perPairCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "run",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576108b0908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c9081634e79f8ca1461005a575080639382255714610055578063c0406226146100505763ebfd94b21461004b57600080fd5b61024a565b6100fe565b6100bd565b346100ba5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100ba57600154600435818102929181159184041417156100b5575481018091116100b557602090604051908152f35b610286565b80fd5b346100f95760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f9576020600054604051908152f35b600080fd5b346100f9576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100ba5761024561013961031e565b60018152600260208201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260408201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60608201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60808201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60a08201526102236101e7610364565b61021c61021660208360c06101fb5a6102b5565b976102096107d05a11610389565b60085a99fa945a906102e2565b93610414565b511561049f565b61023c61023782610232610717565b6102e2565b600155565b600154906102e2565b815580f35b346100f95760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f9576020600154604051908152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83082019182116100b557565b919082039182116100b557565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519060c0820182811067ffffffffffffffff82111761033e57604052565b6102ef565b60405190610180820182811067ffffffffffffffff82111761033e57604052565b604051906020820182811067ffffffffffffffff82111761033e576040526020368337565b1561039057565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f424e50616972696e67507265636f6d70696c65436f7374457374696d61746f7260448201527f3a206e6f7420656e6f756768206761732c2073696e676c6520706169720000006064820152fd5b1561041b57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f424e50616972696e67507265636f6d70696c65436f7374457374696d61746f7260448201527f3a2073696e676c6520706169722063616c6c206973206661696c6564000000006064820152fd5b156104a657565b60a46040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604360248201527f424e50616972696e67507265636f6d70696c65436f7374457374696d61746f7260448201527f3a2073696e676c6520706169722063616c6c20726573756c74206d757374206260648201527f65203000000000000000000000000000000000000000000000000000000000006084820152fd5b1561055757565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f424e50616972696e67507265636f6d70696c65436f7374457374696d61746f7260448201527f3a206e6f7420656e6f756768206761732c20636f75706c6520706169720000006064820152fd5b156105e257565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f424e50616972696e67507265636f6d70696c65436f7374457374696d61746f7260448201527f3a20636f75706c6520706169722063616c6c206973206661696c6564000000006064820152fd5b1561066d57565b60a46040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604360248201527f424e50616972696e67507265636f6d70696c65436f7374457374696d61746f7260448201527f3a20636f75706c6520706169722063616c6c20726573756c74206d757374206260648201527f65203100000000000000000000000000000000000000000000000000000000006084820152fd5b61071f610343565b60018152600260208201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28060408301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed908160608401527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60808401527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60a0840152600160c0840152600260e08401526101008301526101208201527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec6101408201527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d610160820152610877600161083a610364565b61087061086a60208361018061084f5a6102b5565b9861085d6107d05a11610550565b60085a9afa955a906102e2565b946105db565b5114610666565b9056fea2646970667358221220aaf4c1f7f24be66d42162a8142170ad79d705ff716e03387f4166e41a4b8c35f64736f6c63430008130033";

type BNPairingPrecompileCostEstimatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BNPairingPrecompileCostEstimatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BNPairingPrecompileCostEstimator__factory extends ContractFactory {
  constructor(...args: BNPairingPrecompileCostEstimatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BNPairingPrecompileCostEstimator> {
    return super.deploy(
      overrides || {}
    ) as Promise<BNPairingPrecompileCostEstimator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BNPairingPrecompileCostEstimator {
    return super.attach(address) as BNPairingPrecompileCostEstimator;
  }
  override connect(signer: Signer): BNPairingPrecompileCostEstimator__factory {
    return super.connect(signer) as BNPairingPrecompileCostEstimator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BNPairingPrecompileCostEstimatorInterface {
    return new utils.Interface(
      _abi
    ) as BNPairingPrecompileCostEstimatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BNPairingPrecompileCostEstimator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BNPairingPrecompileCostEstimator;
  }
}
