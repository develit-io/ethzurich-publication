/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../contracts/Tokens.sol/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "initSupply",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x604060a08152346200040357620013f0803803806200001e8162000408565b92833981019060a081830312620004035780516001600160401b039290838111620004035781620000519184016200042e565b91602091828201519085821162000403576200006f9183016200042e565b858201519460ff86168603620004035760608301516080909301516001600160a01b03811695908690036200040357805191808311620003035760038054936001938486811c96168015620003f8575b89871014620003e2578190601f968781116200038c575b508990878311600114620003255760009262000319575b505060001982841b1c191690841b1781555b8451918211620003035760049485548481811c91168015620002f8575b89821014620002e35785811162000298575b5087908584116001146200022d5793839491849260009562000221575b50501b92600019911b1c19161782555b8415620001df575060025490828201809211620001ca575060025560008381528083528581208054830190558551918252917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a360805251610f4f9081620004a18239608051816106440152f35b601190634e487b7160e01b6000525260246000fd5b865162461bcd60e51b815291820184905260248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260649150fd5b0151935038806200014b565b9190601f1984169287600052848a6000209460005b8c8983831062000280575050501062000265575b50505050811b0182556200015b565b01519060f884600019921b161c191690553880808062000256565b86860151895590970196948501948893500162000242565b86600052886000208680860160051c8201928b8710620002d9575b0160051c019085905b828110620002cc5750506200012e565b60008155018590620002bc565b92508192620002b3565b602287634e487b7160e01b6000525260246000fd5b90607f16906200011c565b634e487b7160e01b600052604160045260246000fd5b015190503880620000ed565b90869350601f19831691856000528b6000209260005b8d8282106200037557505084116200035c575b505050811b018155620000ff565b015160001983861b60f8161c191690553880806200034e565b8385015186558a979095019493840193016200033b565b90915083600052896000208780850160051c8201928c8610620003d8575b918891869594930160051c01915b828110620003c8575050620000d6565b60008155859450889101620003b8565b92508192620003aa565b634e487b7160e01b600052602260045260246000fd5b95607f1695620000bf565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200030357604052565b919080601f84011215620004035782516001600160401b038111620003035760209062000464601f8201601f1916830162000408565b92818452828287010111620004035760005b8181106200048c57508260009394955001015290565b85810183015184820184015282016200047656fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461074857508163095ea7b31461070057816318160ddd146106c357816323b872dd14610668578163313ce5671461060c578163395093511461056257816342966c681461052657816370a08231146104c557816379cc67901461047457816395d89b411461027e578163a457c2d71461017857508063a9059cbb1461012a5763dd62ed3e146100b457600080fd5b3461012657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012657806020926100ee6108f0565b6100f6610918565b73ffffffffffffffffffffffffffffffffffffffff91821683526001865283832091168252845220549051908152f35b5080fd5b503461012657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610126576020906101716101676108f0565b602435903361093b565b5160018152f35b9050823461027b57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027b576101b16108f0565b918360243592338152600160205281812073ffffffffffffffffffffffffffffffffffffffff861682526020522054908282106101f8576020856101718585038733610b4a565b60849060208651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b80fd5b83833461012657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012657805190828454600181811c9080831692831561046a575b602093848410811461043e5783885287959493929181156103e35750600114610367575b50505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff84118385101761033b575082918261033792528261088a565b0390f35b806041867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b8888529193925086917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106103cd57505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f928201019181936102e9565b8054888501870152879450928501928101610392565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b830101905081601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06102e9565b60248960228c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b91607f16916102c5565b505034610126577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027b576104c26104ae6108f0565b602435906104bd823383610cbf565b610d9c565b80f35b5050346101265760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610126578060209273ffffffffffffffffffffffffffffffffffffffff6105176108f0565b16815280845220549051908152f35b8390346101265760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610126576104c2903533610d9c565b82843461027b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027b5761059a6108f0565b338252600160205282822073ffffffffffffffffffffffffffffffffffffffff82168352602052828220549160243583018093116105e057602084610171858533610b4a565b806011867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b50503461012657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610126576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5050346101265760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610126576020906101716106a76108f0565b6106af610918565b604435916106be833383610cbf565b61093b565b50503461012657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610126576020906002549051908152f35b50503461012657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101265760209061017161073e6108f0565b6024359033610b4a565b8490843461088657827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108865782600354600181811c9080831692831561087c575b602093848410811461043e5783885287959493929181156103e357506001146107ff5750505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff84118385101761033b575082918261033792528261088a565b600388529193925086917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061086657505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f928201019181936102e9565b805488850187015287945092850192810161082b565b91607f169161078e565b8280fd5b60208082528251818301819052939260005b8581106108dc575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b81810183015184820160400152820161089c565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361091357565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361091357565b73ffffffffffffffffffffffffffffffffffffffff809116918215610ac65716918215610a42576000828152806020526040812054918083106109be57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff809116918215610c3c5716918215610bb85760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b9073ffffffffffffffffffffffffffffffffffffffff80831660005260016020526040600020908216600052602052604060002054927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8403610d23575b50505050565b808410610d3e57610d35930391610b4a565b38808080610d1d565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff168015610e9557600091818352826020526040832054818110610e1157817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926020928587528684520360408620558060025403600255604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152fdfea2646970667358221220f82a54bdecae2b51d1bc89fdd0cd4c71d2b59997b243c25dd35862c4795f948b64736f6c63430008130033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    initSupply: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC20> {
    return super.deploy(
      name,
      symbol,
      _decimals,
      initSupply,
      owner,
      overrides || {}
    ) as Promise<MockERC20>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    initSupply: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      _decimals,
      initSupply,
      owner,
      overrides || {}
    );
  }
  override attach(address: string): MockERC20 {
    return super.attach(address) as MockERC20;
  }
  override connect(signer: Signer): MockERC20__factory {
    return super.connect(signer) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new utils.Interface(_abi) as MockERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC20 {
    return new Contract(address, _abi, signerOrProvider) as MockERC20;
  }
}
