/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type NFTUnitOrderStruct = {
  exchangeType: PromiseOrValue<BigNumberish>;
  nft: PromiseOrValue<string>;
  tokenIds: PromiseOrValue<BigNumberish>[];
  settleToken: PromiseOrValue<string>;
  price: PromiseOrValue<BigNumberish>;
  id: PromiseOrValue<BigNumberish>;
  expiry: PromiseOrValue<BigNumberish>;
  chainId: PromiseOrValue<BigNumberish>;
};

export type NFTUnitOrderStructOutput = [
  number,
  string,
  BigNumber[],
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  exchangeType: number;
  nft: string;
  tokenIds: BigNumber[];
  settleToken: string;
  price: BigNumber;
  id: BigNumber;
  expiry: BigNumber;
  chainId: BigNumber;
};

export type ExchangeOrderStruct = {
  exchangeType: PromiseOrValue<BigNumberish>;
  baseToken: PromiseOrValue<string>;
  quoteToken: PromiseOrValue<string>;
  exchangeRate: PromiseOrValue<BigNumberish>;
  id: PromiseOrValue<BigNumberish>;
  expiry: PromiseOrValue<BigNumberish>;
  chainId: PromiseOrValue<BigNumberish>;
};

export type ExchangeOrderStructOutput = [
  number,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  exchangeType: number;
  baseToken: string;
  quoteToken: string;
  exchangeRate: BigNumber;
  id: BigNumber;
  expiry: BigNumber;
  chainId: BigNumber;
};

export type NFTBundleOrderStruct = {
  exchangeType: PromiseOrValue<BigNumberish>;
  nft: PromiseOrValue<string>;
  tokenIds: PromiseOrValue<BigNumberish>[];
  settleToken: PromiseOrValue<string>;
  settleAmount: PromiseOrValue<BigNumberish>;
  id: PromiseOrValue<BigNumberish>;
  expiry: PromiseOrValue<BigNumberish>;
  chainId: PromiseOrValue<BigNumberish>;
};

export type NFTBundleOrderStructOutput = [
  number,
  string,
  BigNumber[],
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  exchangeType: number;
  nft: string;
  tokenIds: BigNumber[];
  settleToken: string;
  settleAmount: BigNumber;
  id: BigNumber;
  expiry: BigNumber;
  chainId: BigNumber;
};

export type SwapOrderStruct = {
  makerTokenIn: PromiseOrValue<string>;
  makerAmountIn: PromiseOrValue<BigNumberish>;
  makerTokenOut: PromiseOrValue<string>;
  makerAmountOut: PromiseOrValue<BigNumberish>;
  id: PromiseOrValue<BigNumberish>;
  expiry: PromiseOrValue<BigNumberish>;
  chainId: PromiseOrValue<BigNumberish>;
};

export type SwapOrderStructOutput = [
  string,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  makerTokenIn: string;
  makerAmountIn: BigNumber;
  makerTokenOut: string;
  makerAmountOut: BigNumber;
  id: BigNumber;
  expiry: BigNumber;
  chainId: BigNumber;
};

export type UserOperationStruct = {
  sender: PromiseOrValue<string>;
  nonce: PromiseOrValue<BigNumberish>;
  initCode: PromiseOrValue<BytesLike>;
  callData: PromiseOrValue<BytesLike>;
  callGasLimit: PromiseOrValue<BigNumberish>;
  verificationGasLimit: PromiseOrValue<BigNumberish>;
  preVerificationGas: PromiseOrValue<BigNumberish>;
  maxFeePerGas: PromiseOrValue<BigNumberish>;
  maxPriorityFeePerGas: PromiseOrValue<BigNumberish>;
  paymasterAndData: PromiseOrValue<BytesLike>;
  signature: PromiseOrValue<BytesLike>;
};

export type UserOperationStructOutput = [
  string,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  sender: string;
  nonce: BigNumber;
  initCode: string;
  callData: string;
  callGasLimit: BigNumber;
  verificationGasLimit: BigNumber;
  preVerificationGas: BigNumber;
  maxFeePerGas: BigNumber;
  maxPriorityFeePerGas: BigNumber;
  paymasterAndData: string;
  signature: string;
};

export interface DexWalletInterface extends utils.Interface {
  functions: {
    "ETH_TOKEN()": FunctionFragment;
    "MAX_ORDER_ID()": FunctionFragment;
    "addDeposit()": FunctionFragment;
    "availableNFTs((uint8,address,uint256[],address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "cancelSwap(uint256)": FunctionFragment;
    "entryPoint()": FunctionFragment;
    "execute(address,uint256,bytes)": FunctionFragment;
    "executeBatch(address[],bytes[])": FunctionFragment;
    "getDeposit()": FunctionFragment;
    "hashExchangeOrder((uint8,address,address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "hashNFTBundleOrder((uint8,address,uint256[],address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "hashNFTUnitOrder((uint8,address,uint256[],address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "hashSwapOrder((address,uint256,address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isValidSwap((address,uint256,address,uint256,uint256,uint256,uint256),bytes)": FunctionFragment;
    "makeNFTBundleExchange((uint8,address,uint256[],address,uint256,uint256,uint256,uint256),bytes)": FunctionFragment;
    "makeNFTUnitExchange((uint8,address,uint256[],address,uint256,uint256,uint256,uint256),uint256[],bytes)": FunctionFragment;
    "makeTokenSwap((address,uint256,address,uint256,uint256,uint256,uint256),bytes)": FunctionFragment;
    "makeTokensExchange((uint8,address,address,uint256,uint256,uint256,uint256),uint256,bytes)": FunctionFragment;
    "maxTokensExchange((uint8,address,address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "nftVerifiers(bytes32)": FunctionFragment;
    "nonce()": FunctionFragment;
    "onERC721Received()": FunctionFragment;
    "orderUsed(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "takeNFTUnitExchange((uint8,address,uint256[],address,uint256,uint256,uint256,uint256),uint256[],address,bytes)": FunctionFragment;
    "takeTokenSwap((address,uint256,address,uint256,uint256,uint256,uint256),address,bytes)": FunctionFragment;
    "takeTokensExchange((uint8,address,address,uint256,uint256,uint256,uint256),uint256,address,bytes)": FunctionFragment;
    "tokensVerifiers(bytes32)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "usedOrderIds(uint256)": FunctionFragment;
    "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": FunctionFragment;
    "verifyNFTs(uint256)": FunctionFragment;
    "verifyTokens(uint256)": FunctionFragment;
    "withdrawDepositTo(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ETH_TOKEN"
      | "MAX_ORDER_ID"
      | "addDeposit"
      | "availableNFTs"
      | "cancelSwap"
      | "entryPoint"
      | "execute"
      | "executeBatch"
      | "getDeposit"
      | "hashExchangeOrder"
      | "hashNFTBundleOrder"
      | "hashNFTUnitOrder"
      | "hashSwapOrder"
      | "initialize"
      | "isValidSwap"
      | "makeNFTBundleExchange"
      | "makeNFTUnitExchange"
      | "makeTokenSwap"
      | "makeTokensExchange"
      | "maxTokensExchange"
      | "nftVerifiers"
      | "nonce"
      | "onERC721Received"
      | "orderUsed"
      | "owner"
      | "proxiableUUID"
      | "takeNFTUnitExchange"
      | "takeTokenSwap"
      | "takeTokensExchange"
      | "tokensVerifiers"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "usedOrderIds"
      | "validateUserOp"
      | "verifyNFTs"
      | "verifyTokens"
      | "withdrawDepositTo"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ETH_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_ORDER_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableNFTs",
    values: [NFTUnitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSwap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashExchangeOrder",
    values: [ExchangeOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashNFTBundleOrder",
    values: [NFTBundleOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashNFTUnitOrder",
    values: [NFTUnitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashSwapOrder",
    values: [SwapOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSwap",
    values: [SwapOrderStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeNFTBundleExchange",
    values: [NFTBundleOrderStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeNFTUnitExchange",
    values: [
      NFTUnitOrderStruct,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeTokenSwap",
    values: [SwapOrderStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeTokensExchange",
    values: [
      ExchangeOrderStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTokensExchange",
    values: [ExchangeOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "nftVerifiers",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderUsed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takeNFTUnitExchange",
    values: [
      NFTUnitOrderStruct,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "takeTokenSwap",
    values: [SwapOrderStruct, PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "takeTokensExchange",
    values: [
      ExchangeOrderStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensVerifiers",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "usedOrderIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [
      UserOperationStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyNFTs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDepositTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "ETH_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ORDER_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashExchangeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashNFTBundleOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashNFTUnitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeNFTBundleExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeNFTUnitExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeTokenSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeTokensExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTokensExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderUsed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeNFTUnitExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeTokenSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeTokensExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDepositTo",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OrderUsed(uint256)": EventFragment;
    "SimpleAccountInitialized(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderUsed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SimpleAccountInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OrderUsedEventObject {
  id: BigNumber;
}
export type OrderUsedEvent = TypedEvent<[BigNumber], OrderUsedEventObject>;

export type OrderUsedEventFilter = TypedEventFilter<OrderUsedEvent>;

export interface SimpleAccountInitializedEventObject {
  entryPoint: string;
  owner: string;
}
export type SimpleAccountInitializedEvent = TypedEvent<
  [string, string],
  SimpleAccountInitializedEventObject
>;

export type SimpleAccountInitializedEventFilter =
  TypedEventFilter<SimpleAccountInitializedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface DexWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DexWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    MAX_ORDER_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    addDeposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    availableNFTs(
      order: NFTUnitOrderStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIds: BigNumber[] }>;

    cancelSwap(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    entryPoint(overrides?: CallOverrides): Promise<[string]>;

    execute(
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeBatch(
      dest: PromiseOrValue<string>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    hashExchangeOrder(
      order: ExchangeOrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    hashNFTBundleOrder(
      order: NFTBundleOrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    hashNFTUnitOrder(
      order: NFTUnitOrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    hashSwapOrder(
      order: SwapOrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    initialize(
      aaOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isValidSwap(
      order: SwapOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;

    makeNFTBundleExchange(
      order: NFTBundleOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeNFTUnitExchange(
      order: NFTUnitOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeTokenSwap(
      order: SwapOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeTokensExchange(
      order: ExchangeOrderStruct,
      baseAmount: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxTokensExchange(
      order: ExchangeOrderStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseAmount: BigNumber; quoteAmount: BigNumber }
    >;

    nftVerifiers(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { exchangeType: number; settleAmtBal: BigNumber }
    >;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      overrides?: CallOverrides
    ): Promise<[string] & { selector: string }>;

    orderUsed(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { used: boolean }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    takeNFTUnitExchange(
      order: NFTUnitOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      maker: PromiseOrValue<string>,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeTokenSwap(
      order: SwapOrderStruct,
      maker: PromiseOrValue<string>,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeTokensExchange(
      order: ExchangeOrderStruct,
      baseAmount: PromiseOrValue<BigNumberish>,
      maker: PromiseOrValue<string>,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokensVerifiers(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerAmountOut: BigNumber;
        takerBalanceIn: BigNumber;
      }
    >;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usedOrderIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyNFTs(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyTokens(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawDepositTo(
      withdrawAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ETH_TOKEN(overrides?: CallOverrides): Promise<string>;

  MAX_ORDER_ID(overrides?: CallOverrides): Promise<BigNumber>;

  addDeposit(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  availableNFTs(
    order: NFTUnitOrderStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  cancelSwap(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  entryPoint(overrides?: CallOverrides): Promise<string>;

  execute(
    dest: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    func: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeBatch(
    dest: PromiseOrValue<string>[],
    func: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  hashExchangeOrder(
    order: ExchangeOrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  hashNFTBundleOrder(
    order: NFTBundleOrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  hashNFTUnitOrder(
    order: NFTUnitOrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  hashSwapOrder(
    order: SwapOrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    aaOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isValidSwap(
    order: SwapOrderStruct,
    makerSignature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  makeNFTBundleExchange(
    order: NFTBundleOrderStruct,
    makerSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeNFTUnitExchange(
    order: NFTUnitOrderStruct,
    exchangeIds: PromiseOrValue<BigNumberish>[],
    makerSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeTokenSwap(
    order: SwapOrderStruct,
    makerSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeTokensExchange(
    order: ExchangeOrderStruct,
    baseAmount: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxTokensExchange(
    order: ExchangeOrderStruct,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { baseAmount: BigNumber; quoteAmount: BigNumber }
  >;

  nftVerifiers(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber] & { exchangeType: number; settleAmtBal: BigNumber }
  >;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(overrides?: CallOverrides): Promise<string>;

  orderUsed(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  takeNFTUnitExchange(
    order: NFTUnitOrderStruct,
    exchangeIds: PromiseOrValue<BigNumberish>[],
    maker: PromiseOrValue<string>,
    makerSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeTokenSwap(
    order: SwapOrderStruct,
    maker: PromiseOrValue<string>,
    makerSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeTokensExchange(
    order: ExchangeOrderStruct,
    baseAmount: PromiseOrValue<BigNumberish>,
    maker: PromiseOrValue<string>,
    makerSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokensVerifiers(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      takerAmountOut: BigNumber;
      takerBalanceIn: BigNumber;
    }
  >;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usedOrderIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validateUserOp(
    userOp: UserOperationStruct,
    userOpHash: PromiseOrValue<BytesLike>,
    missingAccountFunds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyNFTs(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyTokens(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawDepositTo(
    withdrawAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_TOKEN(overrides?: CallOverrides): Promise<string>;

    MAX_ORDER_ID(overrides?: CallOverrides): Promise<BigNumber>;

    addDeposit(overrides?: CallOverrides): Promise<void>;

    availableNFTs(
      order: NFTUnitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    cancelSwap(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    entryPoint(overrides?: CallOverrides): Promise<string>;

    execute(
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeBatch(
      dest: PromiseOrValue<string>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    hashExchangeOrder(
      order: ExchangeOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    hashNFTBundleOrder(
      order: NFTBundleOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    hashNFTUnitOrder(
      order: NFTUnitOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    hashSwapOrder(
      order: SwapOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      aaOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isValidSwap(
      order: SwapOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeNFTBundleExchange(
      order: NFTBundleOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeNFTUnitExchange(
      order: NFTUnitOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeTokenSwap(
      order: SwapOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeTokensExchange(
      order: ExchangeOrderStruct,
      baseAmount: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxTokensExchange(
      order: ExchangeOrderStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseAmount: BigNumber; quoteAmount: BigNumber }
    >;

    nftVerifiers(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { exchangeType: number; settleAmtBal: BigNumber }
    >;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(overrides?: CallOverrides): Promise<string>;

    orderUsed(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    takeNFTUnitExchange(
      order: NFTUnitOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      maker: PromiseOrValue<string>,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    takeTokenSwap(
      order: SwapOrderStruct,
      maker: PromiseOrValue<string>,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    takeTokensExchange(
      order: ExchangeOrderStruct,
      baseAmount: PromiseOrValue<BigNumberish>,
      maker: PromiseOrValue<string>,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensVerifiers(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerAmountOut: BigNumber;
        takerBalanceIn: BigNumber;
      }
    >;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    usedOrderIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyNFTs(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyTokens(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawDepositTo(
      withdrawAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OrderUsed(uint256)"(id?: null): OrderUsedEventFilter;
    OrderUsed(id?: null): OrderUsedEventFilter;

    "SimpleAccountInitialized(address,address)"(
      entryPoint?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): SimpleAccountInitializedEventFilter;
    SimpleAccountInitialized(
      entryPoint?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): SimpleAccountInitializedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    ETH_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ORDER_ID(overrides?: CallOverrides): Promise<BigNumber>;

    addDeposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    availableNFTs(
      order: NFTUnitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelSwap(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    entryPoint(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeBatch(
      dest: PromiseOrValue<string>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    hashExchangeOrder(
      order: ExchangeOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashNFTBundleOrder(
      order: NFTBundleOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashNFTUnitOrder(
      order: NFTUnitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashSwapOrder(
      order: SwapOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      aaOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isValidSwap(
      order: SwapOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeNFTBundleExchange(
      order: NFTBundleOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeNFTUnitExchange(
      order: NFTUnitOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeTokenSwap(
      order: SwapOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeTokensExchange(
      order: ExchangeOrderStruct,
      baseAmount: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxTokensExchange(
      order: ExchangeOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftVerifiers(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(overrides?: CallOverrides): Promise<BigNumber>;

    orderUsed(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    takeNFTUnitExchange(
      order: NFTUnitOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      maker: PromiseOrValue<string>,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeTokenSwap(
      order: SwapOrderStruct,
      maker: PromiseOrValue<string>,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeTokensExchange(
      order: ExchangeOrderStruct,
      baseAmount: PromiseOrValue<BigNumberish>,
      maker: PromiseOrValue<string>,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokensVerifiers(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usedOrderIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyNFTs(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyTokens(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawDepositTo(
      withdrawAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_ORDER_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addDeposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    availableNFTs(
      order: NFTUnitOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelSwap(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    entryPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeBatch(
      dest: PromiseOrValue<string>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashExchangeOrder(
      order: ExchangeOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashNFTBundleOrder(
      order: NFTBundleOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashNFTUnitOrder(
      order: NFTUnitOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashSwapOrder(
      order: SwapOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      aaOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isValidSwap(
      order: SwapOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeNFTBundleExchange(
      order: NFTBundleOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeNFTUnitExchange(
      order: NFTUnitOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeTokenSwap(
      order: SwapOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeTokensExchange(
      order: ExchangeOrderStruct,
      baseAmount: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxTokensExchange(
      order: ExchangeOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftVerifiers(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderUsed(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeNFTUnitExchange(
      order: NFTUnitOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      maker: PromiseOrValue<string>,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeTokenSwap(
      order: SwapOrderStruct,
      maker: PromiseOrValue<string>,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeTokensExchange(
      order: ExchangeOrderStruct,
      baseAmount: PromiseOrValue<BigNumberish>,
      maker: PromiseOrValue<string>,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokensVerifiers(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usedOrderIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyNFTs(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyTokens(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDepositTo(
      withdrawAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
