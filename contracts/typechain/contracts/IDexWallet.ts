/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type NFTBundleOrderStruct = {
  exchangeType: PromiseOrValue<BigNumberish>;
  nft: PromiseOrValue<string>;
  tokenIds: PromiseOrValue<BigNumberish>[];
  settleToken: PromiseOrValue<string>;
  settleAmount: PromiseOrValue<BigNumberish>;
  id: PromiseOrValue<BigNumberish>;
  expiry: PromiseOrValue<BigNumberish>;
  chainId: PromiseOrValue<BigNumberish>;
};

export type NFTBundleOrderStructOutput = [
  number,
  string,
  BigNumber[],
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  exchangeType: number;
  nft: string;
  tokenIds: BigNumber[];
  settleToken: string;
  settleAmount: BigNumber;
  id: BigNumber;
  expiry: BigNumber;
  chainId: BigNumber;
};

export type NFTUnitOrderStruct = {
  exchangeType: PromiseOrValue<BigNumberish>;
  nft: PromiseOrValue<string>;
  tokenIds: PromiseOrValue<BigNumberish>[];
  settleToken: PromiseOrValue<string>;
  price: PromiseOrValue<BigNumberish>;
  id: PromiseOrValue<BigNumberish>;
  expiry: PromiseOrValue<BigNumberish>;
  chainId: PromiseOrValue<BigNumberish>;
};

export type NFTUnitOrderStructOutput = [
  number,
  string,
  BigNumber[],
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  exchangeType: number;
  nft: string;
  tokenIds: BigNumber[];
  settleToken: string;
  price: BigNumber;
  id: BigNumber;
  expiry: BigNumber;
  chainId: BigNumber;
};

export type SwapOrderStruct = {
  makerTokenIn: PromiseOrValue<string>;
  makerAmountIn: PromiseOrValue<BigNumberish>;
  makerTokenOut: PromiseOrValue<string>;
  makerAmountOut: PromiseOrValue<BigNumberish>;
  id: PromiseOrValue<BigNumberish>;
  expiry: PromiseOrValue<BigNumberish>;
  chainId: PromiseOrValue<BigNumberish>;
};

export type SwapOrderStructOutput = [
  string,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  makerTokenIn: string;
  makerAmountIn: BigNumber;
  makerTokenOut: string;
  makerAmountOut: BigNumber;
  id: BigNumber;
  expiry: BigNumber;
  chainId: BigNumber;
};

export type ExchangeOrderStruct = {
  exchangeType: PromiseOrValue<BigNumberish>;
  baseToken: PromiseOrValue<string>;
  quoteToken: PromiseOrValue<string>;
  exchangeRate: PromiseOrValue<BigNumberish>;
  id: PromiseOrValue<BigNumberish>;
  expiry: PromiseOrValue<BigNumberish>;
  chainId: PromiseOrValue<BigNumberish>;
};

export type ExchangeOrderStructOutput = [
  number,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  exchangeType: number;
  baseToken: string;
  quoteToken: string;
  exchangeRate: BigNumber;
  id: BigNumber;
  expiry: BigNumber;
  chainId: BigNumber;
};

export interface IDexWalletInterface extends utils.Interface {
  functions: {
    "makeNFTBundleExchange((uint8,address,uint256[],address,uint256,uint256,uint256,uint256),uint256[],bytes)": FunctionFragment;
    "makeNFTUnitExchange((uint8,address,uint256[],address,uint256,uint256,uint256,uint256),uint256[],bytes)": FunctionFragment;
    "makeTokenSwap((address,uint256,address,uint256,uint256,uint256,uint256),bytes)": FunctionFragment;
    "makeTokensExchange((uint8,address,address,uint256,uint256,uint256,uint256),uint256,bytes)": FunctionFragment;
    "verifyNFTs(uint256)": FunctionFragment;
    "verifyTokens(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "makeNFTBundleExchange"
      | "makeNFTUnitExchange"
      | "makeTokenSwap"
      | "makeTokensExchange"
      | "verifyNFTs"
      | "verifyTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "makeNFTBundleExchange",
    values: [
      NFTBundleOrderStruct,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeNFTUnitExchange",
    values: [
      NFTUnitOrderStruct,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeTokenSwap",
    values: [SwapOrderStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeTokensExchange",
    values: [
      ExchangeOrderStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyNFTs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "makeNFTBundleExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeNFTUnitExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeTokenSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeTokensExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDexWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDexWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    makeNFTBundleExchange(
      order: NFTBundleOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeNFTUnitExchange(
      order: NFTUnitOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeTokenSwap(
      order: SwapOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeTokensExchange(
      order: ExchangeOrderStruct,
      baseAmount: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyNFTs(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyTokens(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  makeNFTBundleExchange(
    order: NFTBundleOrderStruct,
    exchangeIds: PromiseOrValue<BigNumberish>[],
    makerSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeNFTUnitExchange(
    order: NFTUnitOrderStruct,
    exchangeIds: PromiseOrValue<BigNumberish>[],
    makerSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeTokenSwap(
    order: SwapOrderStruct,
    makerSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeTokensExchange(
    order: ExchangeOrderStruct,
    baseAmount: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyNFTs(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyTokens(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    makeNFTBundleExchange(
      order: NFTBundleOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeNFTUnitExchange(
      order: NFTUnitOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeTokenSwap(
      order: SwapOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeTokensExchange(
      order: ExchangeOrderStruct,
      baseAmount: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyNFTs(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyTokens(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    makeNFTBundleExchange(
      order: NFTBundleOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeNFTUnitExchange(
      order: NFTUnitOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeTokenSwap(
      order: SwapOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeTokensExchange(
      order: ExchangeOrderStruct,
      baseAmount: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyNFTs(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyTokens(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    makeNFTBundleExchange(
      order: NFTBundleOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeNFTUnitExchange(
      order: NFTUnitOrderStruct,
      exchangeIds: PromiseOrValue<BigNumberish>[],
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeTokenSwap(
      order: SwapOrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeTokensExchange(
      order: ExchangeOrderStruct,
      baseAmount: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyNFTs(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyTokens(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
